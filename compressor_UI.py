# Form implementation generated from reading ui file 'compressor.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


import threading
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt, QMetaObject
from PyQt6.QtWidgets import QFileDialog, QMessageBox
import compressor
from PyQt6.QtGui import QImage
from PIL import Image


from PyQt6.QtWidgets import QMainWindow

class Ui_MainWindow(QMainWindow):
        compression_finished = QtCore.pyqtSignal(QtGui.QPixmap)
        def setupUi(self, MainWindow):
                self.image= None
                self.image_address = None
                self.image_orignal = None
                self.r_value = None

                MainWindow.setObjectName("Image Compressor")
                MainWindow.resize(946, 600)
                MainWindow.setMinimumSize(QtCore.QSize(946, 0))
                MainWindow.setAnimated(True)
                self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
                self.centralwidget.setStyleSheet("background-color: rgb(2, 74, 16);")
                self.centralwidget.setObjectName("centralwidget")
                self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
                self.horizontalLayout.setObjectName("horizontalLayout")
                self.imageView = QtWidgets.QGraphicsView(parent=self.centralwidget)
                self.imageView.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.imageView.setObjectName("imageView")
                self.horizontalLayout.addWidget(self.imageView)
                self.side_pane = QtWidgets.QFrame(parent=self.centralwidget)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.side_pane.sizePolicy().hasHeightForWidth())
                self.side_pane.setSizePolicy(sizePolicy)
                self.side_pane.setMinimumSize(QtCore.QSize(200, 0))
                self.side_pane.setMaximumSize(QtCore.QSize(300, 16777215))
                self.side_pane.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
                self.side_pane.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
                self.side_pane.setObjectName("side_pane")
                self.verticalLayout = QtWidgets.QVBoxLayout(self.side_pane)
                self.verticalLayout.setObjectName("verticalLayout")
                self.frame_2 = QtWidgets.QFrame(parent=self.side_pane)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Maximum)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.frame_2.sizePolicy().hasHeightForWidth())
                self.frame_2.setSizePolicy(sizePolicy)
                self.frame_2.setMaximumSize(QtCore.QSize(16777215, 200))
                self.frame_2.setSizeIncrement(QtCore.QSize(0, 50))
                self.frame_2.setStyleSheet("")
                self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
                self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
                self.frame_2.setObjectName("frame_2")
                self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_2)
                self.verticalLayout_2.setObjectName("verticalLayout_2")
                self.open_btn = QtWidgets.QPushButton(parent=self.frame_2)
                self.open_btn.setMinimumSize(QtCore.QSize(0, 50))
                font = QtGui.QFont()
                font.setFamily("Open Sans Bold")
                font.setPointSize(20)
                font.setBold(True)
                font.setWeight(75)
                self.open_btn.setFont(font)
                self.open_btn.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "color: rgb(2, 74, 16);")
                icon = QtGui.QIcon()
                icon.addPixmap(QtGui.QPixmap(":/icons/folder-open.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                self.open_btn.setIcon(icon)
                self.open_btn.setIconSize(QtCore.QSize(32, 32))
                self.open_btn.setAutoRepeatInterval(100)
                self.open_btn.setAutoDefault(False)
                self.open_btn.setDefault(False)
                self.open_btn.setFlat(False)
                self.open_btn.setObjectName("open_btn")
                self.open_btn.clicked.connect(self.open)
                self.verticalLayout_2.addWidget(self.open_btn)
                self.save_btn = QtWidgets.QPushButton(parent=self.frame_2)
                self.save_btn.setMinimumSize(QtCore.QSize(0, 50))
                font = QtGui.QFont()
                font.setFamily("Open Sans Bold")
                font.setPointSize(20)
                font.setBold(True)
                font.setWeight(75)
                self.save_btn.setFont(font)
                self.save_btn.setDisabled(True)
                self.save_btn.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "color: rgb(2, 74, 16);")
                icon1 = QtGui.QIcon()
                icon1.addPixmap(QtGui.QPixmap(":/icons/disk.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                self.save_btn.setIcon(icon1)
                self.save_btn.setIconSize(QtCore.QSize(32, 32))
                self.save_btn.setObjectName("save_btn")
                self.save_btn.clicked.connect(self.save)
                self.verticalLayout_2.addWidget(self.save_btn)
                self.verticalLayout.addWidget(self.frame_2)
                self.line = QtWidgets.QFrame(parent=self.side_pane)
                self.line.setStyleSheet("color: rgb(2, 47, 21);")
                self.line.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
                self.line.setLineWidth(5)
                self.line.setFrameShape(QtWidgets.QFrame.Shape.HLine)
                self.line.setObjectName("line")
                self.verticalLayout.addWidget(self.line)
                self.frame_3 = QtWidgets.QFrame(parent=self.side_pane)
                self.frame_3.setSizeIncrement(QtCore.QSize(0, 0))
                self.frame_3.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
                self.frame_3.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
                self.frame_3.setObjectName("frame_3")
                self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_3)
                self.verticalLayout_3.setObjectName("verticalLayout_3")
                self.frame_4 = QtWidgets.QFrame(parent=self.frame_3)
                self.frame_4.setMaximumSize(QtCore.QSize(16777215, 60))
                self.frame_4.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
                self.frame_4.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
                self.frame_4.setObjectName("frame_4")
                self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_4)
                self.verticalLayout_4.setObjectName("verticalLayout_4")
                self.label = QtWidgets.QLabel(parent=self.frame_4)
                self.label.setMaximumSize(QtCore.QSize(16777215, 25))
                self.label.setStyleSheet("color: rgb(255, 255, 255);")
                self.label.setObjectName("label")
                self.verticalLayout_4.addWidget(self.label)
                self.horizontalSlider = QtWidgets.QSlider(parent=self.frame_4)
                self.horizontalSlider.setMinimumSize(QtCore.QSize(0, 30))
                self.horizontalSlider.setStyleSheet("color: rgb(255, 255, 255);")
                self.horizontalSlider.setMaximum(200)
                self.horizontalSlider.setTracking(False)
                self.horizontalSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
                self.horizontalSlider.setInvertedAppearance(False)
                self.horizontalSlider.setTickPosition(QtWidgets.QSlider.TickPosition.TicksBelow)
                self.horizontalSlider.setTickInterval(20)
                self.horizontalSlider.setObjectName("horizontalSlider")
                self.verticalLayout_4.addWidget(self.horizontalSlider)
                self.verticalLayout_3.addWidget(self.frame_4)
                self.cmprs_btn = QtWidgets.QPushButton(parent=self.frame_3)
                self.cmprs_btn.setMinimumSize(QtCore.QSize(0, 50))
                font = QtGui.QFont()
                font.setFamily("Open Sans Bold")
                font.setPointSize(20)
                font.setBold(True)
                font.setWeight(75)
                self.cmprs_btn.setFont(font)
                self.cmprs_btn.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "color: rgb(2, 74, 16);")
                icon2 = QtGui.QIcon()
                icon2.addPixmap(QtGui.QPixmap(":/icons/compress-alt.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                self.cmprs_btn.setIcon(icon2)
                self.cmprs_btn.setIconSize(QtCore.QSize(32, 32))
                self.cmprs_btn.setDisabled(True)
                self.cmprs_btn.setObjectName("cmprs_btn")
                self.cmprs_btn.clicked.connect(self.compress)
                self.verticalLayout_3.addWidget(self.cmprs_btn)
                self.verticalLayout.addWidget(self.frame_3)
                self.horizontalLayout.addWidget(self.side_pane)
                MainWindow.setCentralWidget(self.centralwidget)
                self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
                self.menubar.setGeometry(QtCore.QRect(0, 0, 946, 22))
                self.menubar.setObjectName("menubar")
                self.menuFile = QtWidgets.QMenu(parent=self.menubar)
                self.menuFile.setObjectName("menuFile")
                self.menuAbout = QtWidgets.QMenu(parent=self.menubar)
                self.menuAbout.setObjectName("menuAbout")
                MainWindow.setMenuBar(self.menubar)
                self.actionOpen = QtGui.QAction(parent=MainWindow)
                self.actionOpen.setObjectName("actionOpen")
                self.actionSave = QtGui.QAction(parent=MainWindow)
                self.actionSave.setObjectName("actionSave")
                self.actionSave_As = QtGui.QAction(parent=MainWindow)
                self.actionSave_As.setObjectName("actionSave_As")
                self.actionExit = QtGui.QAction(parent=MainWindow)
                self.actionExit.setObjectName("actionExit")
                self.actionAbout = QtGui.QAction(parent=MainWindow)
                self.actionAbout.setObjectName("actionAbout")
                self.menuFile.addAction(self.actionOpen)
                self.menuFile.addAction(self.actionSave)
                self.menuFile.addAction(self.actionSave_As)
                self.menuFile.addSeparator()
                self.menuFile.addAction(self.actionExit)
                self.menuAbout.addAction(self.actionAbout)
                self.menubar.addAction(self.menuFile.menuAction())
                self.menubar.addAction(self.menuAbout.menuAction())

                self.retranslateUi(MainWindow)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "Image Compressor"))
                self.open_btn.setText(_translate("MainWindow", "Open"))
                self.save_btn.setText(_translate("MainWindow", "Save"))
                self.label.setText(_translate("MainWindow", "R value"))
                self.cmprs_btn.setText(_translate("MainWindow", "Compress"))
                self.menuFile.setTitle(_translate("MainWindow", "File"))
                self.menuAbout.setTitle(_translate("MainWindow", "Help"))
                self.actionOpen.setText(_translate("MainWindow", "Open"))
                self.actionSave.setText(_translate("MainWindow", "Save"))
                self.actionSave_As.setText(_translate("MainWindow", "Save As"))
                self.actionExit.setText(_translate("MainWindow", "Exit"))
                self.actionAbout.setText(_translate("MainWindow", "About"))

        def open(self):
                # write code for open dialogue box which selects image file
                # set image to the selected image
                # display image in the image view
                # self.image = image
                # self.display_image()
                self.image_address = QFileDialog.getOpenFileName()[0]
                if self.image_address != "":
                        self.image = Image.open(self.image_address)
                        self.image_orignal = Image.open(self.image_address)
                        scene = QtWidgets.QGraphicsScene()

                        pixmap = QtGui.QPixmap(self.image_address)
                        pixmap_item = QtWidgets.QGraphicsPixmapItem(pixmap)
                        scene.addItem(pixmap_item)
                        self.imageView.setScene(scene)
                        self.imageView.fitInView(scene.sceneRect(), QtCore.Qt.AspectRatioMode.KeepAspectRatio)

                        self.cmprs_btn.setDisabled(False)
                        self.save_btn.setDisabled(False)
        def update_image_size(self, event):
                # Update the image size when the window is resized
                scene = self.imageView.scene()
                if scene is not None:
                        self.imageView.fitInView(scene.sceneRect(), QtCore.Qt.AspectRatioMode.KeepAspectRatio)


        def save(self):
                file_dialog = QFileDialog()
                options = file_dialog.options()
                options |= QFileDialog.Option.DontUseNativeDialog

                file_name, _ = file_dialog.getSaveFileName(
                        self,
                        "Save Image",
                        "",
                        "JPEG Image (*.jpg);;PNG Image (*.png)",
                        options=options
                )

                if file_name:
                        # Ensure the file has a valid extension
                        if not file_name.lower().endswith(('.jpg', '.png')):
                                file_name += '.jpg'  # Default to JPEG if no extension or unknown extension

                        # Save the image using the selected file name and format
                        self.image.save(file_name)

                        # Optionally, you can show a message box indicating successful save
                        QMessageBox.information(self, "Image Saved", f"Image saved as {file_name}")
        

        def compress(self):
                self.r_value = self.horizontalSlider.value()
                # Show compression pop-up
                self.show_compression_popup()
                self.image_compressor_thread = threading.Thread(target=self.compress_image_async)
                self.image_compressor_thread.start()
        
        def update_image_view(self, pixmap):
                self.imageView.scene().clear()
                scene = QtWidgets.QGraphicsScene()
                pixmap_item = QtWidgets.QGraphicsPixmapItem(pixmap)
                scene.addItem(pixmap_item)
                self.imageView.setScene(scene)
                self.imageView.fitInView(scene.sceneRect(), QtCore.Qt.AspectRatioMode.KeepAspectRatio)

                self.close_compression_popup()

        def compress_image_async(self):
                # Perform the compression task asynchronously
                compressed_image = compressor.compress(self.image_orignal, self.r_value)

                # Convert PIL image to QPixmap
                image = compressed_image.convert("RGBA")
                data = image.tobytes("raw", "RGBA")
                qim = QtGui.QImage(data, image.size[0], image.size[1], QtGui.QImage.Format.Format_RGBA8888)
                pixmap = QtGui.QPixmap.fromImage(qim)

                # Emit signal to update the image view in the main thread
                self.compression_finished.emit(pixmap)

                # Update the image instance variable
                self.image = compressed_image
        
        def show_compression_popup(self):
                # Show a pop-up indicating that compression is in progress
                self.compression_popup = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Icon.Information, "Compression", "Image is being compressed...", QtWidgets.QMessageBox.StandardButton.NoButton)
                self.compression_popup.setWindowModality(QtCore.Qt.WindowModality.WindowModal)
                self.compression_popup.show()

        def close_compression_popup(self):
                # Close the compression pop-up
                if self.compression_popup:
                        self.compression_popup.close()
                        self.compression_popup = None

               

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.resizeEvent = ui.update_image_size
    ui.compression_finished.connect(ui.update_image_view)
    MainWindow.show()
    sys.exit(app.exec())
